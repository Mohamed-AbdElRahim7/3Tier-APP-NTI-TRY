pipeline {
  agent any

  environment {
    TF_IN_AUTOMATION = "true"
  }

  stages {
    stage('Clone Repo') {
      steps {
        git branch: 'main', url: 'https://github.com/Mohamed-AbdElRahim7/3Tier-APP-NTI-TRY.git'
        echo '✅ Repository cloned.'
      }
    }

    stage('Terraform Init') {
      steps {
        dir('terraform') {
          sh 'terraform init'
          echo '✅ Terraform initialized.'
        }
      }
    }

    stage('Import Resources') {
      steps {
        dir('terraform') {
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-creds',
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            sh '''
              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

              # EKS Cluster
              terraform import module.eks.aws_eks_cluster.eks nti-3Tier-App

              # Node Group (replace with actual)
              terraform import module.eks.aws_eks_node_group.default nti-3Tier-App:default

              # RDS Instance (replace with actual DB identifier)
              terraform import module.rds.aws_db_instance.main nti-rds-db

              # ECR Repos (check names are lowercase!)
              terraform import module.ecr.aws_ecr_repository.frontend nti-3tier-app-frontend
              terraform import module.ecr.aws_ecr_repository.backend nti-3tier-app-backend

              # S3 (check actual name)
              terraform import module.s3.aws_s3_bucket.elb_logs nti-elb-logs-bucket

              # Jenkins EC2 (replace with actual ID)
              terraform import module.ec2_jenkins.aws_instance.jenkins i-019880575f839039c
            '''
            echo '✅ Resources imported.'
          }
        }
      }
    }

    stage('Terraform Destroy') {
      steps {
        dir('terraform') {
          withCredentials([
            usernamePassword(
              credentialsId: 'aws-creds',
              usernameVariable: 'AWS_ACCESS_KEY_ID',
              passwordVariable: 'AWS_SECRET_ACCESS_KEY'
            )
          ]) {
            sh '''
              export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
              export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
              terraform destroy -auto-approve
            '''
            echo '✅ Terraform destroy complete.'
          }
        }
      }
    }
  }
}
